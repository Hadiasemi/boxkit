name: build-boxkit
on:
  pull_request:
    branches:
      - main
  schedule:
    - cron: '0 0 * * TUE'
  push:
    branches:
      - main
    paths-ignore:
      - '**/README.md'
env:
  IMAGE_NAME: boxkit
  IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}

jobs:
  push-ghcr:
    name: Build and push image
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      fail-fast: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Metadata
        id: meta
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            echo "TAG=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
          else
            echo "TAG=latest" >> $GITHUB_ENV
          fi

      - name: Lowercase the image registry
        run: echo "IMAGE_REGISTRY=$(echo $IMAGE_REGISTRY | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

  

      - name: Push To GHCR
        uses: redhat-actions/push-to-registry@v2
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: ${{ env.TAG }}
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.3.0

      - name: Decode Cosign Private Key
        run: |
          echo "${{ secrets.COSIGN_PRIVATE_KEY }}" | base64 -d > cosign.key
          chmod +x cosign.key
        env:
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
        shell: bash

      - name: Sign container image
        run: |
          cosign sign -y --key cosign.key ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG }}
        env:
          COSIGN_EXPERIMENTAL: true

      - name: Echo outputs
        run: echo "${{ toJSON(steps.push.outputs) }}"
        shell: bash
